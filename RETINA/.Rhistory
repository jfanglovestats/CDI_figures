}
p1 <- ggplot(longData,
aes(x = factor(candidate_label, levels = order_level), y = factor(benchmark_label), fill = PropValue)) +
scale_fill_gradientn(limits = c(0,1),
colours = c(rgb(204,204,204, maxColorValue = 255), rgb(25,150,125, maxColorValue = 255))) +
labs(x = "Candidate label", y = "Benchmark label", fill = "Proportion") +
theme_classic() + geom_tile() +
theme(axis.text = element_text(size=10, angle=0, vjust=0.3), axis.line = element_line(size = 1))
if(rename_candidate_clusters){
p1 <- p1 + scale_x_discrete(labels = candidate_cluster_names)
}
if(proportion_size){
p1 <- p1 + geom_text(label = round(longData$PropValue, 2),
size = proportion_size)
}
if(show_axis_names == FALSE){
p1 <- p1 + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
}
if(show_legend == FALSE){
p1 <- p1 + theme(legend.position = "none")
}
return(p1)
}
contingency_heatmap(factor(celltype_labels, levels = ordered_ct), as.character(readRDS(paste0(set.indx, "_Seurat_k36_labs.rds"))[,1]))
print(contingency_heatmap(factor(celltype_labels, levels = ordered_ct), as.character(readRDS(paste0(set.indx, "_Seurat_k36_labs.rds"))[,1])))
rm(list = ls())
celltype_labels = para.set$subtype
set.indx = "cortex"
para.set = readRDS(paste0(set.indx, "_paraset.rds"))
setwd("..")
set.indx = "cortex"
para.set = readRDS(paste0(set.indx, "_paraset.rds"))
getwd()
list.files()
set.indx = "cortex"
para.set = readRDS(paste0(set.indx, "_paraset.rds"))
celltype_labels = para.set$subtype
ordered_ct = c("Endo_1","Endo_2", "SM_1", "SM_2", # Endo 4
"Astro",
"ExcL23", "ExcL4", "ExcL5_1", "ExcL5_2", "ExcL5_3", "ExcL6", "Hip", "RSP", "Sub", #Excl 9
"Int_Cck", "Int_Npy", "Int_Pv", "Int_Sst_1", "Int_Sst_2", "Int_Vip", # Int 6
"Micro_1", "Micro_2",
"Macrophage",
"Pericyte", # Mural
"Olig_1", "Olig_2", "Olig_3", "Olig_4", "Olig_5", "Olig_6", "Olig_7", "OPC_1", "OPC_2" #Olig 9
)
contingency_heatmap <- function(benchmark_label,
candidate_label,
proportion_size = 4,
show_axis_names = TRUE,
show_legend = TRUE,
rename_candidate_clusters = FALSE,
candidate_cluster_names = NULL){
## create contingency table
count_mat <- as.matrix(table(data.frame(benchmark_label, candidate_label)))
## change from counts to proportions
col_sum_matrix <- matrix(rep(colSums(count_mat), nrow(count_mat)), nrow = nrow(count_mat), byrow = TRUE)
## each row is a candidate class, and each row sums to 1.
prop_mat <- t(round(count_mat / col_sum_matrix, 2))
longData <- reshape2::melt(prop_mat)
## To avoid the problem of undifined variable
PropValue <- NULL
colnames(longData)[3] <- "PropValue"
## remove zero proportions
longData <- longData[longData$PropValue != 0, ]
## order benchmark cell types according to the composition of candidate cell types
order_level <- NULL
for(cell_type in levels(as.factor(longData$benchmark_label))){
large_prop_indx <- names(which(prop_mat[,cell_type] >= 0.2))
large_prop_sort <- large_prop_indx[order(prop_mat[large_prop_indx, cell_type], decreasing = TRUE)]
distinct_indx <- setdiff(large_prop_sort, order_level)
order_level <- c(order_level, distinct_indx)
}
p1 <- ggplot(longData,
aes(x = factor(candidate_label, levels = order_level), y = factor(benchmark_label), fill = PropValue)) +
scale_fill_gradientn(limits = c(0,1),
colours = c(rgb(204,204,204, maxColorValue = 255), rgb(25,150,125, maxColorValue = 255))) +
labs(x = "Candidate label", y = "Benchmark label", fill = "Proportion") +
theme_classic() + geom_tile() +
theme(axis.text = element_text(size=10, angle=0, vjust=0.3), axis.line = element_line(size = 1))
if(rename_candidate_clusters){
p1 <- p1 + scale_x_discrete(labels = candidate_cluster_names)
}
if(proportion_size){
p1 <- p1 + geom_text(label = round(longData$PropValue, 2),
size = proportion_size)
}
if(show_axis_names == FALSE){
p1 <- p1 + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
}
if(show_legend == FALSE){
p1 <- p1 + theme(legend.position = "none")
}
return(p1)
}
contingency_heatmap(factor(celltype_labels, levels = ordered_ct),
as.character(readRDS(paste0(set.indx, "_Seurat_k36_labs.rds"))[,1]))
contingency_heatmap(factor(celltype_labels, levels = ordered_ct),
as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k36_labs.rds"))[,1]))
contingency_heatmap(factor(celltype_labels, levels = ordered_ct),
as.character(readRDS(paste0(set.indx, "_Seurat_k36_labs.rds"))[,1]))
contingency_heatmap(factor(celltype_labels, levels = ordered_ct),
as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k36_labs.rds"))[,1]))
contingency_heatmap(factor(celltype_labels, levels = ordered_ct),
as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k36_labs.rds"))[,1])) -> pp
pp
str(pp)
contingency_heatmap(as.character(celltype_labels),
as.character(readRDS(paste0(set.indx, "_Seurat_k36_labs.rds"))[,1]))
contingency_heatmap(as.character(celltype_labels),
as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k36_labs.rds"))[,1]))
table(as.character(celltype_labels), as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k36_labs.rds"))[,1]))
library(grDevices)
library(reshape2)
contingency_heatmap(as.character(celltype_labels),
as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k36_labs.rds"))[,1]))
library(ggpplot2)
library(ggplot2)
contingency_heatmap(as.character(celltype_labels)[1:20],
as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k36_labs.rds"))[,1])[1:20])
contingency_heatmap(as.character(maintype_labels),
as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k36_labs.rds"))[,1])[1:20])
maintype_labels = para.set$celltype
maintype_labels = ifelse(maintype_labels == "Endothelial_SmoothMuscle", "Endothelial", maintype_labels)
contingency_heatmap(as.character(maintype_labels),
as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k36_labs.rds"))[,1])[1:20])
contingency_heatmap(as.character(maintype_labels),
as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k36_labs.rds"))[,1]))
contingency_heatmap(as.character(maintype_labels),
as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k20_labs.rds"))[,1]))
maintype_labels = para.set$celltype
maintype_labels = ifelse(maintype_labels == "Endothelial_SmoothMuscle", "Endothelial", maintype_labels)
ordered_ct2 = c("Endothelial", "Astrocytes", "Excitatory", "Interneurons",
"Microglia", "Macrophages", "Mural", "Oligodendrocytes")
contingency_heatmap(factor(maintype_labels, levels = ordered_ct2),
as.character(readRDS(paste0(set.indx, "_Seurat_k20_labs.rds"))[,1]))
contingency_heatmap(factor(maintype_labels, levels = ordered_ct2),
as.character(readRDS(paste0(set.indx, "_Seurat_k20_labs.rds"))[,1]))
contingency_heatmap(factor(maintype_labels, levels = ordered_ct2),
as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k20_labs.rds"))[,1]))
names(para.set)
maintype_labels = para.set$celltype
maintype_labels = ifelse(maintype_labels == "Endothelial_SmoothMuscle", "Endothelial", maintype_labels)
ordered_ct2 = c("Endothelial", "Astrocytes", "Excitatory", "Interneurons",
"Microglia", "Macrophages", "Mural", "Oligodendrocytes")
contingency_heatmap(factor(maintype_labels, levels = ordered_ct2),
as.character(readRDS(paste0(set.indx, "_Seurat_k20_labs.rds"))[,1]))
set.indx
contingency_heatmap(factor(maintype_labels, levels = ordered_ct2),
as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k20_labs.rds"))[,1]))
table(as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k20_labs.rds"))[,1]))
p = contingency_heatmap(factor(maintype_labels, levels = ordered_ct2),
as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k20_labs.rds"))[,1]))
print(p)
View(para.set)
View(p)
library(Matrix)
library(stats)
library(matrixStats)
library(MASS)
library(doParallel)
library(Rcpp)
library(truncnorm)
library(data.table)
library(mclust)
library(Seurat)
library(ggplot2)
library(gridExtra)
library(ggsci)
library(RColorBrewer)
library(BiocParallel)
library(reshape2)
rm(list = ls())
set.indx = "cortex"
para.set = readRDS(paste0(set.indx, "_paraset.rds"))
maintype_labels = para.set$celltype
maintype_labels = ifelse(maintype_labels == "Endothelial_SmoothMuscle", "Endothelial", maintype_labels)
ordered_ct2 = c("Endothelial", "Astrocytes", "Excitatory", "Interneurons",
"Microglia", "Macrophages", "Mural", "Oligodendrocytes")
contingency_heatmap(factor(maintype_labels, levels = ordered_ct2),
as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k20_labs.rds"))[,1]))
contingency_heatmap <- function(benchmark_label,
candidate_label,
proportion_size = 4,
show_axis_names = TRUE,
show_legend = TRUE,
rename_candidate_clusters = FALSE,
candidate_cluster_names = NULL){
## create contingency table
count_mat <- as.matrix(table(data.frame(benchmark_label, candidate_label)))
## change from counts to proportions
col_sum_matrix <- matrix(rep(colSums(count_mat), nrow(count_mat)), nrow = nrow(count_mat), byrow = TRUE)
## each row is a candidate class, and each row sums to 1.
prop_mat <- t(round(count_mat / col_sum_matrix, 2))
longData <- reshape2::melt(prop_mat)
## To avoid the problem of undifined variable
PropValue <- NULL
colnames(longData)[3] <- "PropValue"
## remove zero proportions
longData <- longData[longData$PropValue != 0, ]
## order benchmark cell types according to the composition of candidate cell types
order_level <- NULL
for(cell_type in levels(as.factor(longData$benchmark_label))){
large_prop_indx <- names(which(prop_mat[,cell_type] >= 0.2))
large_prop_sort <- large_prop_indx[order(prop_mat[large_prop_indx, cell_type], decreasing = TRUE)]
distinct_indx <- setdiff(large_prop_sort, order_level)
order_level <- c(order_level, distinct_indx)
}
p1 <- ggplot(longData,
aes(x = factor(candidate_label, levels = order_level), y = factor(benchmark_label), fill = PropValue)) +
scale_fill_gradientn(limits = c(0,1),
colours = c(rgb(204,204,204, maxColorValue = 255), rgb(25,150,125, maxColorValue = 255))) +
labs(x = "Candidate label", y = "Benchmark label", fill = "Proportion") +
theme_classic() + geom_tile() +
theme(axis.text = element_text(size=10, angle=0, vjust=0.3), axis.line = element_line(size = 1))
if(rename_candidate_clusters){
p1 <- p1 + scale_x_discrete(labels = candidate_cluster_names)
}
if(proportion_size){
p1 <- p1 + geom_text(label = round(longData$PropValue, 2),
size = proportion_size)
}
if(show_axis_names == FALSE){
p1 <- p1 + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
}
if(show_legend == FALSE){
p1 <- p1 + theme(legend.position = "none")
}
return(p1)
}
contingency_heatmap(factor(maintype_labels, levels = ordered_ct2),
as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k20_labs.rds"))[,1]))
celltype_labels = para.set$subtype
ordered_ct = c("Endo_1","Endo_2", "SM_1", "SM_2", # Endo 4
"Astro",
"ExcL23", "ExcL4", "ExcL5_1", "ExcL5_2", "ExcL5_3", "ExcL6", "Hip", "RSP", "Sub", #Excl 9
"Int_Cck", "Int_Npy", "Int_Pv", "Int_Sst_1", "Int_Sst_2", "Int_Vip", # Int 6
"Micro_1", "Micro_2",
"Macrophage",
"Pericyte", # Mural
"Olig_1", "Olig_2", "Olig_3", "Olig_4", "Olig_5", "Olig_6", "Olig_7", "OPC_1", "OPC_2" #Olig 9
)
contingency_heatmap(factor(celltype_labels, levels = ordered_ct),
as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k36_labs.rds"))[,1]))
p1 <- contingency_heatmap(factor(celltype_labels, levels = ordered_ct),
as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k36_labs.rds"))[,1]))
p = p1 + scale_x_discrete(labels=c("1", "", "",  "", "5", "", "", "", "", "10",
"", "", "", "",  "15", "", "",  "", "", "20", "", "", "", "",  "25",
"", "",  "", "", "30", "",  "",  "", "", "35",  ""))
print(p)
names(para.set)
# pdf("ht_zp_fitting.pdf",  width = 8, height = 5)
pdf("ht_zp_fitting3.pdf",  width = 8, height = 5)
dev.off()
cinfo = readRDS("/Users/jiyuanfang/Documents/cdi_zenodo/RETINA/retina_cell_info.rds")
bpmf = readRDS("/Users/jiyuanfang/Downloads/bipolar_sub/bpmf_Xsub500_info.rds")
head(cinfo)
head(bpmf)
dim(cinfo)
dim(bpmf)
para.set = readRDS("/Users/jiyuanfang/Documents/cdi_zenodo/RETINA/retina_paraset.rds")
names(para.set)
table(para.set$maintype)
length(para.set$maintype)
# pdf("ht_zp_fitting.pdf",  width = 8, height = 5)
pdf(paste0(set.indx, "_zp_fitting4.pdf"),  width = 8, height = 5)
getwd()
dev.off()
setwd("/Users/jiyuanfang/Documents/cdi_zenodo/RETINA/clustering_labels")
method_name = c("CIDR", "KMeans", "HC", "SC3", "Seurat")
lab_df = data.frame(tmp = rep(NA, 26830))
set.indx
set.indx = "retina"
for(k in seq_len(length(method_name))){
for(i in seq_len(length(ncl_vec))){
cur_df = readRDS(paste0(set.indx, "_", method_name[k], "_k", ncl_vec[i], "_labs.rds"))
colnames(cur_df) = paste0(method_name[k], "_k", ncl_vec[i])
lab_df = cbind(lab_df, cur_df)
}
}
ncl_vec = c(5,     10,   15,     16,    17,     18,    19,    20,     25,     30,    31,    32,     33,       35)
for(k in seq_len(length(method_name))){
for(i in seq_len(length(ncl_vec))){
cur_df = readRDS(paste0(set.indx, "_", method_name[k], "_k", ncl_vec[i], "_labs.rds"))
colnames(cur_df) = paste0(method_name[k], "_k", ncl_vec[i])
lab_df = cbind(lab_df, cur_df)
}
}
lab_df = lab_df[,-1]
dim(lab_df)
saveRDS(lab_df, paste0(set.indx, "_clustering_labels.rds"))
aa = readRDS("/Users/jiyuanfang/Documents/cdi_zenodo/RETINA/retina_cdi_df.rds")
bb = readRDS("/Users/jiyuanfang/Desktop/retina_cdi_df_0404.rds")
head(aa)
dim(aa)
dim(bb)
bb
aa[aa$N_cluster == 18,]
cc = readRDS("/Users/jiyuanfang/Downloads/impact_backup/bipolar/d0822_cdi_df.rds")
head(cc)
cc[cc$Cluster == 18,]
aa[aa$N_cluster == 18,]
getwd()
setwd("..")
info = readRDS(paste0(set.indx, "_filtered_info.rds"))
head(info)
table(info$cell_type)
table(info$main_type)
benchmark_return = readRDS( paste0(set.indx, "_benchmark_return.rds"))
benchmark_return
cdi_df = readRDS("/Users/jiyuanfang/Documents/cdi_zenodo/RETINA/retina_cdi_df.rds")
CDI_lineplot(
cdi_dataframe = cdi_df,
cdi_type = "CDI_AIC",
benchmark_maintype_ncluster = length(unique(para.set$celltype)),
benchmark_maintype_cdi = lapply(benchmark_return[["benchmark_cell"]], function(x) x/10^6),
benchmark_celltype_ncluster = length(unique(para.set$subtype)),
benchmark_celltype_cdi = lapply(benchmark_return[["benchmark_sub"]], function(x) x/10^6)) +
scale_color_manual(values = c(rgb(64, 83, 133, max = 255),#purpleblue -- CIDR
rgb(136, 146, 179, max = 255), #light purpleblue -- HC
rgb(112, 186, 211, max = 255), #lightblue -- K-means
rgb(229, 160, 133, max = 255),#pink -- SC3
"#BCBD22B2",  #-- Seurat
rgb(76, 158, 137, max = 255))) #green -- Spectral
CDI_lineplot <- function(cdi_dataframe,
cdi_type,
benchmark_celltype_cdi = NULL,
benchmark_celltype_ncluster = NULL,
benchmark_maintype_cdi = NULL,
benchmark_maintype_ncluster = NULL,
clustering_method = NULL,
show_axis_names = TRUE,
show_method_legend = TRUE){
min_indx <- which.min(cdi_dataframe[, cdi_type])
if(!is.null(clustering_method)){
cdi_dataframe["Cluster_method"] <- clustering_method
} else if(sum(is.na(cdi_dataframe$Cluster_method))){
cdi_dataframe[is.na(cdi_dataframe$Cluster_method), "Cluster_method"] <- "Unknown_method"
}
p1 <- ggplot(cdi_dataframe, aes_string(x = "N_cluster", y = cdi_type, group = "Cluster_method")) +
geom_point(aes_string(color = "Cluster_method"), size = 4, alpha = 0.7) +
geom_line(aes_string(color = "Cluster_method"), size = 2, alpha = 0.7) +
geom_point(data = cdi_dataframe[min_indx, ],
colour = grDevices::rgb(210,85,62, max = 255),
shape = 17, size = 4) + labs(x = "Number of clusters") +
scale_color_d3() + theme_bw()
if(show_axis_names == FALSE){
p1 <- p1 + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
}
if(show_method_legend == FALSE){
p1 <- p1 + theme(legend.position = "none")
}
if((missing(benchmark_celltype_cdi) | missing(benchmark_celltype_ncluster)) & (missing(benchmark_maintype_cdi) | missing(benchmark_maintype_ncluster))){
return(p1)
}
if(cdi_type == "CDI_AIC"){
if(!is.null(benchmark_celltype_cdi)){
p1 <- p1 + geom_point(data = data.frame(
N_cluster = benchmark_celltype_ncluster,
CDI_AIC = benchmark_celltype_cdi$CDI_AIC,
Cluster_method = "Benchmark"),
colour = "purple3",
shape = "*",
size = 15)
}
if(!is.null(benchmark_maintype_cdi)){
p1 <- p1 + geom_point(data = data.frame(
N_cluster = benchmark_maintype_ncluster,
CDI_AIC = benchmark_maintype_cdi$CDI_AIC,
Cluster_method = "Benchmark"),
colour="#7E6148FF",
shape = "*",
size = 15)
}
}
if(cdi_type == "CDI_BIC"){
if(!is.null(benchmark_celltype_cdi)){
p1 <- p1 + geom_point(data = data.frame(
N_cluster = benchmark_celltype_ncluster,
CDI_BIC = benchmark_celltype_cdi$CDI_BIC,
Cluster_method = "Benchmark"),
colour="purple3",
shape = "*",
size = 15)
}
if(!is.null(benchmark_maintype_cdi)){
p1 <- p1 + geom_point(data = data.frame(
N_cluster = benchmark_maintype_ncluster,
CDI_BIC = benchmark_maintype_cdi$CDI_BIC,
Cluster_method = "Benchmark"),
colour="#7E6148FF",
shape = "*",
size = 15)
}
}
return(p1)
}
CDI_lineplot(
cdi_dataframe = cdi_df,
cdi_type = "CDI_AIC",
benchmark_maintype_ncluster = length(unique(para.set$celltype)),
benchmark_maintype_cdi = lapply(benchmark_return[["benchmark_cell"]], function(x) x/10^6),
benchmark_celltype_ncluster = length(unique(para.set$subtype)),
benchmark_celltype_cdi = lapply(benchmark_return[["benchmark_sub"]], function(x) x/10^6)) +
scale_color_manual(values = c(rgb(64, 83, 133, max = 255),#purpleblue -- CIDR
rgb(136, 146, 179, max = 255), #light purpleblue -- HC
rgb(112, 186, 211, max = 255), #lightblue -- K-means
rgb(229, 160, 133, max = 255),#pink -- SC3
"#BCBD22B2",  #-- Seurat
rgb(76, 158, 137, max = 255))) #green -- Spectral
lapply(benchmark_return[["benchmark_cell"]], function(x) x/10^6)
lapply(benchmark_return[["benchmark_sub"]], function(x) x/10^6))
lapply(benchmark_return[["benchmark_sub"]], function(x) x/10^6)
benchmark_return
CDI_lineplot(
cdi_dataframe = cdi_df,
cdi_type = "CDI_AIC",
benchmark_celltype_ncluster = length(unique(info$cell_type)),
benchmark_celltype_cdi = lapply(benchmark_return[["benchmark_cell"]], function(x) x/10^6),
benchmark_maintype_ncluster = length(unique(info$main_type)),
benchmark_maintype_cdi = lapply(benchmark_return[["benchmark_main"]], function(x) x/10^6)) +
scale_color_manual(values = c(rgb(64, 83, 133, max = 255),#purpleblue -- CIDR
rgb(136, 146, 179, max = 255), #light purpleblue -- HC
rgb(112, 186, 211, max = 255), #lightblue -- K-means
rgb(229, 160, 133, max = 255),#pink -- SC3
"#BCBD22B2")) #-- Seurat
ordered_maintype = c("OFF BC", "ON BC", "Rod BC", "Amacrine", "Muller glia", "Photoreceptor")
contingency_heatmap(factor(info$main_type, levels = ordered_maintype),
as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k18_labs.rds"))[,1]))
table(factor(info$main_type, levels = ordered_maintype))
cur_info = info %>%
mutate(main_type = recode(cell_type, "RBC" = "Rod BC",
"Muller_glia" = "Muller glia",
"Cone_photoreceptors" = "Photoreceptor",
"Rod_photoreceptors" = "Photoreceptor",
"BC1A" = "OFF BC", "BC1B" = "OFF BC",
"BC2" = "OFF BC", "BC3A" = "OFF BC",
"BC3B" = "OFF BC", "BC4" = "OFF BC",
"BC5A" = "ON BC", "BC5B" = "ON BC",
"BC5C" = "ON BC", "BC5D" = "ON BC",
"BC6" = "ON BC", "BC7" = "ON BC",
"BC8_BC9" = "ON BC"),
cell_type = recode(cell_type, "RBC" = "Rod BC",
"Muller_glia" = "Muller glia", "Rod_PR" = "Rod PR", "Cone_PR" = "Cone PR"))
library(dplyr)
cur_info = info %>%
mutate(main_type = recode(cell_type, "RBC" = "Rod BC",
"Muller_glia" = "Muller glia",
"Cone_photoreceptors" = "Photoreceptor",
"Rod_photoreceptors" = "Photoreceptor",
"BC1A" = "OFF BC", "BC1B" = "OFF BC",
"BC2" = "OFF BC", "BC3A" = "OFF BC",
"BC3B" = "OFF BC", "BC4" = "OFF BC",
"BC5A" = "ON BC", "BC5B" = "ON BC",
"BC5C" = "ON BC", "BC5D" = "ON BC",
"BC6" = "ON BC", "BC7" = "ON BC",
"BC8_BC9" = "ON BC"),
cell_type = recode(cell_type, "RBC" = "Rod BC",
"Muller_glia" = "Muller glia", "Rod_PR" = "Rod PR", "Cone_PR" = "Cone PR"))
contingency_heatmap(factor(info$main_type, levels = ordered_maintype),
as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k18_labs.rds"))[,1]))
contingency_heatmap(factor(cur_info$main_type, levels = ordered_maintype),
as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k18_labs.rds"))[,1]))
p <- contingency_heatmap(factor(cur_info$main_type, levels = ordered_maintype),
as.character(readRDS(paste0("./clustering_labels/", set.indx, "_Seurat_k18_labs.rds"))[,1]))
p1 <- p + scale_x_discrete(labels=c("1", "", "",  "", "5", "", "", "", "", "10",
"", "", "", "",  "15", "", "",  ""))
print(p1)
ordered_celltype = c("BC1A", "BC1B", "BC2", "BC3A", "BC3B", "BC4", "BC5A", "BC5B", "BC5C",
"BC5D", 'BC6', 'BC7', "BC8_BC9",  "Rod BC", "Amacrine", "Muller glia",
"Cone PR", "Rod PR")
ordered_celltype = c("BC1A", "BC1B", "BC2", "BC3A", "BC3B", "BC4", "BC5A", "BC5B", "BC5C",
"BC5D", 'BC6', 'BC7', "BC8_BC9",  "Rod BC", "Amacrine", "Muller glia",
"Cone PR", "Rod PR")
p <- contingency_heatmap(factor(cur_info$cell_type, levels = ordered_celltype),
as.character(readRDS(paste0(set.indx, "_KMeans_k33_labs.rds"))[,1]))
p1 <- p + scale_x_discrete(labels=c("1", "", "",  "", "5", "", "", "", "", "10",
"", "", "", "",  "15", "", "",  "", "", "20", "", "", "", "",  "25",
"", "",  "", "", "30", "",  "",  ""))
print(p1)
p <- contingency_heatmap(factor(cur_info$cell_type, levels = ordered_celltype),
as.character(readRDS(paste0("./clustering_labels/", set.indx, "_KMeans_k33_labs.rds"))[,1]))
p1 <- p + scale_x_discrete(labels=c("1", "", "",  "", "5", "", "", "", "", "10",
"", "", "", "",  "15", "", "",  "", "", "20", "", "", "", "",  "25",
"", "",  "", "", "30", "",  "",  ""))
print(p1)
seurat_lab2 = function(set.indx, seu_obj, res_vec){
label_result = matrix(NA, nrow = nrow(seu_obj@meta.data), ncol = length(res_vec))
num_cl = numeric(length(res_vec))
for(i in 1:length(res_vec)){
seu_obj = FindClusters(seu_obj, resolution = res_vec[i], verbose = F)
df = data.frame(Seurat = seu_obj@meta.data$seurat_clusters)
num_cl[i] = length(unique(df$Seurat))
#saveRDS(df, paste0(set.indx, "_Seurat_k", num_cl[i], "_labs.rds"))
saveRDS(df, paste0(set.indx, "_Seurat_k", num_cl[i], "_labs.rds"))
seu_obj@meta.data$seurat_clusters = NULL
}
return(data.frame(ncl = num_cl, res = res_vec))
}
saveRDS(aicbic_df, "lung_cdi_df_0414.rds")
- UMAPS from selected Features -- Fig.3
info = readRDS("/Users/jiyuanfang/Documents/cdi_zenodo/RETINA/retina_filtered_info.rds")
HEAD(info)
head(info)
sub_uns = readRDS("/Users/jiyuanfang/Documents/cdi_zenodo/Metrics/results/cortex_subtype_uns_metrics.rds")
main_uns = readRDS("/Users/jiyuanfang/Documents/cdi_zenodo/Metrics/results/cortex_celltype_uns_metrics.rds")
head(sub_uns)
head(main_uns)
am = readRDS("/Users/jiyuanfang/Documents/cdi_zenodo/Metrics/Results/retina_maintype_uns_metrics.rds")
aa = readRDS("/Users/jiyuanfang/Documents/cdi_zenodo/Metrics/Results/retina_uns_metrics.rds")
head(aa)
head(am)
